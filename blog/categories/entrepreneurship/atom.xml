<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Entrepreneurship | Lionhacks]]></title>
  <link href="http://guymorita.github.io//github/blog/categories/entrepreneurship/atom.xml" rel="self"/>
  <link href="http://guymorita.github.io//github/"/>
  <updated>2013-08-14T21:12:50-07:00</updated>
  <id>http://guymorita.github.io//github/</id>
  <author>
    <name><![CDATA[Your Name]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Learning how to code - Why?]]></title>
    <link href="http://guymorita.github.io//github/2013/06/learning-how-to-code-why/"/>
    <updated>2013-06-12T00:00:00-07:00</updated>
    <id>http://guymorita.github.io//github/2013/06/learning-how-to-code-why</id>
    <content type="html"><![CDATA[<p>After a year of being in SF, I never would have imagined that my path would put me here. It&rsquo;s easily been one of the most inspiring and fulfilling years of my life. Before moving here, I had no frameworks for how a technology company was supposed to work or skills to build a product. Sadly, I was one of those that thought that developers were just the people who spoke a complex language (code) and who you told to build stuff. After having helped on the product side to launch a mobile game, contributing as a product manager to 3 mobile apps (one of them from concept to launch) pulling in over 20M in revenue, watching many of my close friends create successful companies/products from simple ideas and lastly having jumped into code myself, I now understand how fundamentally important having knowledge of code is for anyone looking to work in technology. In this post, I&rsquo;d like to walk you through some of my driving thoughts in my decision to learn how to code and why I chose a bootcamp.</p>

<h3>Being a better tech founder</h3>


<p>It&rsquo;s very hard to lead and build rapport with developers if you don&rsquo;t understand what they&rsquo;re doing. When I was running my web marketing company for three years I had a lot of need for development help. I could only handle html/css and the management of content management sites myself. For anything else I needed outside help. When I went to developers for help, I knew little to nothing about what they were saying or how the technologies worked. I didn&rsquo;t know the fundamental difference between PHP/Javascript/Ruby/Java/C++ or any other. All I knew was whether or not a web service or program performed it&rsquo;s job effectively. Apart from that, I couldn&rsquo;t tell if a product/feature should take 2 weeks or 2 hours. I had no understanding of the technologies and thus also had little knowledge of what they were capable of. I thought working with developers was really frustrating because stuff often didn&rsquo;t get built the way I had envisioned, roadblocks would seemingly appear out of nowhere to delay the project and things that I thought should be fast often took forever.</p>

<p>Given that I want to start more technology companies in the near future, I have made it mandatory in my mind to learn how to code. If in 5-10 years, I didn&rsquo;t have a strong understanding of it, I would have some regret. I want to have a fundamental understanding of what technology products are doing and why decisions are made the way they are. I want to be able to work hand-in-hand with developers to help them think through technology problems and not just be the &ldquo;business guy&rdquo;, no pun intended. I want to be able to call out a developer if they say something is going to take 2 weeks when it should take 2 hours. Not for the sake of calling them out but to help work out better solutions together and to be on the same page. I am absolutely certain that learning how to code will make me a better tech founder.</p>

<h3>Being a better product manager</h3>


<p>Product management is like running a mini-company in the form of a product. It&rsquo;s nice to be able to focus fully on just the product. You don&rsquo;t have to deal with all the miscellaneous tasks that can take a lot of time as a founder. Like recruiting, accounting, office logistics, fundraising, customer service, having no salary, etc. And even at that, I&rsquo;d say product management is on par with running a company in terms of difficultly although much lower in terms of stress level.</p>

<p>One of my big takeaways from being a product manager without a coding background was that I didn&rsquo;t know what features were possible. I remember working with our lead mobile designer who would come up with an awesome new interface which made the app feel much cleaner and modern. I&rsquo;d then bring in the engineering team only to find out it wasn&rsquo;t possible for 3-4 listed reasons of which none of them we fundamentally understood. To me you can only get so far with asking &ldquo;why&rdquo; before you&rsquo;re just building concept over concepts over concepts. Without having a technical background, it&rsquo;s impossible to fully understand the constraints through which to guide the product.</p>

<p>To me, a tech founder or PM that can&rsquo;t code is like a restaurant owner that can&rsquo;t cook. While it&rsquo;s not necessary to do the role, many of the most successful restaurateurs started off as great chefs. Without learning how to cook amazing food it&rsquo;s hard to develop the palette to differentiate between bad from good, or good from great.</p>

<h3>Being a developer and having the ability to build products myself</h3>


<p>Have you ever had an idea or service that you thought could be great but you didn&rsquo;t couldn&rsquo;t do it yourself? I&rsquo;m sure we all have. One of your first thoughts was probably, &ldquo;yeah that would be awesome, but who could actually build it? how much would it cost to get it built? what if the project didn&rsquo;t work out? i&rsquo;d be out thousands of dollars,&rdquo; or something on those lines. I&rsquo;ve had plenty of these too and while it could be answered with getting a technical co-founder, for me it would be even more satisfying to be able to build things myself. I&rsquo;ve been through startup weekends where people build fully functional web apps that could bring in revenue in one short weekend. With all of the huge growth of collaboration in open-source software, the &lsquo;magical&rsquo; frameworks and Heroku/AWS, it feels like it&rsquo;s very quickly moving to a world where you can go from idea to viable application / MVP in a manner of days/weeks. I want to be able to bring my ideas to life through my own doing.</p>

<p><a href="http://www.lionhacks.com/wp-content/uploads/2013/06/6951505066_f41c9a1b8d_o.jpg"><img class="alignright size-medium wp-image-247" alt="6951505066_f41c9a1b8d_o" src="http://www.lionhacks.com/wp-content/uploads/2013/06/6951505066_f41c9a1b8d_o-300x225.jpg" width="300" height="225" /></a></p>

<h3>It's an awesome learning experience</h3>


<p>If you&rsquo;re like me and you voraciously love to learn new things, coding is really fun to learn. I didn&rsquo;t think I would enjoy it as much as I do but it&rsquo;s really cool to see your ideas become real functioning things with a few lines of code. I built a game of tic-tac-toe and a functioning blog site each in under an hour with very limited knowledge. While they probably aren&rsquo;t clean in term of code, it&rsquo;s crazy how much can be built in so little time. Even crazier is how a little idea can turn into a few thousand lines of code which can then be spread to millions of people. Some amount of work you do can be distributed and experienced by people all over the world in a manner of seconds. Most industries and lines of work can&rsquo;t really touch that.</p>

<p>Coding teaches you to be a better problem solver. In test-driven development you basically write tests that you want your code to pass before you even begin coding. By doing this you&rsquo;re setting a definite endpoint and are then letting yourself loose to try and figure it out. There are many ways to get to the end but at the start it&rsquo;s often opaque as to how to get there. Coding forces you to go about your thoughts in a very organized and productive manner. You can&rsquo;t just wing it with coding. Things don&rsquo;t just fall into place. You have to deliberately will thousands of small pieces together to create something usable.</p>

<p>It also teaches you to be more detail oriented. You can&rsquo;t be sloppy when you code. The computer (depending on the language) isn&rsquo;t forgiving when you make mistakes. When you&rsquo;re first learning, you can&rsquo;t just glance at code and understand it. Nor can you just fly through the documentation and understand everything. You have to really look at it and understand every symbol in the code. Missing a semi-colon or a bracket can break the entire app.</p>

<h3>Why I chose to do a bootcamp</h3>


<p>My decision to dedicate the next 6 months to learning how to code and building some awesome products wasn&rsquo;t a very hard decision after my thought process above, but why did I choose to do so through a bootcamp? In short, I can&rsquo;t think of  a more effective way to learn a skill with such a steep learning curve. Coding is not easy. While it might be easy to go on CodeAcademy or the Michael Hartl Rails tutorial, you aren&rsquo;t really learning how to be a good software engineer. Every time you get stuck you have to revert to forums and other stuff online that might not even solve the problem or fully answer your question. On top of that, you don&rsquo;t know what you don&rsquo;t know. Sure, maybe you can build a blog that has some cool features. But what if those features took you 10x longer than they should&rsquo;ve because of a simple lack of knowledge. Not only that, but it&rsquo;s hard to sit a computer that much learning by yourself if/when you get stuck.</p>

<p>I want to be at a professional level of development in the next 6 months and I don&rsquo;t think I could get there through self study. While I consider myself a motivated person, I don&rsquo;t think I&rsquo;m disciplined or talented enough to get to a professional level by myself in 6 months. I want mentorship, direction and instruction. And a lot of it. Bootcamps provide massive amounts of structure to the learn processes necessary to get to a professional level by the end of the program. They are led by people that have been coding for 5-10 years and who love to teach. Anytime you get stuck, you can get a detailed answer/explanation to the issue you&rsquo;re having within minutes. Instead of getting discouraged from being stuck, you get to work amongst 20+ other peers who are working through the same problems and growing with you. Instead of not knowing what you don&rsquo;t know, you&rsquo;ll have most the things that you need to know laid out.</p>

<p>After deciding to do a bootcamp my next challenge was to figure out which bootcamp. I knew I wanted to stay in SF so there 5 main choices. The top 3 in my mind in terms of career prospects were Dev Bootcamp, App Academy and Hack Reactor. Dev Bootcamp filled up through the beginning of 2014, App Academy I had a really bad application process with (involving emailing them without responses 4 times weeks/months before applying only to find out when I did the final admissions hoop that the cohort was already full) and Hack Reactor which I initially couldn&rsquo;t apply to because their form kept failing (possibly due to my browser plugins?). The other options were HackBright which is women only and General Assembly whose program was very new to the bay. Given that the top 3 looked out of reach, I went through with GA&rsquo;s in hopes that it could be as intense and successful as the other ones. Upon my first days of being in GA&rsquo;s immersive web development program I immediately felt it was not the place for me. I was looking for something far more intense, that asked for more commitment from students and something that was much more outcome driven. After realizing that I wanted to leave the program, I started scrambling for ways to get into other programs and ended up emailing the founders of Hack Reactor to see if they had any spots open. After jumping through a chat application challenge and a couple coding/technical interviews, I am now extremely excited to be starting at Hack Reactor on June 17th! Their track record for creating hirable software engineers at a professional grade is unmatched. They demand more dedication from students than any other program. It is 6 days a week, 12-14 hours/day. Sometimes it&rsquo;s scary thinking about that much time commitment, but I just remember that if I&rsquo;m going to do anything it&rsquo;s worth doing it well. And if I&rsquo;m going to dedicate the next 3 months into learning how to code, I might as well go all in.</p>

<p>With that I will leave you. I hope it was interesting to walk through my thought process of deciding to learn to code. Many people have said that it&rsquo;s backwards to learn how to code after I&rsquo;ve run a company and worked in product management but I think it&rsquo;s quite the contrary. I see it as a very central dot that will connect to many opportunities in the near future. For anyone interested, I&rsquo;m going to try to keep a daily blog of the bootcamp experience <a href="http://guymorita.tumblr.com/">here</a>.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[In 7 days... Created a team, Built a working app in 24 hrs, Won Startup Weekend and Pitched at DEMO]]></title>
    <link href="http://guymorita.github.io//github/2012/04/in-7-days-created-a-team-built-a-working-app-in-24-hrs-won-startup-weekend-pitched-at-demo/"/>
    <updated>2012-04-22T00:00:00-07:00</updated>
    <id>http://guymorita.github.io//github/2012/04/in-7-days-created-a-team-built-a-working-app-in-24-hrs-won-startup-weekend-pitched-at-demo</id>
    <content type="html"><![CDATA[<p>The last 7 days were a complete whirlwind of entrepreneurship, team building, game design, mentorship, networking, emotional highs, and of course, no sleep. What began with my friend, Jonathan Fung, coaxing me to cancel my flight home and instead participate in <a href="http://startupweekend.org/">Startup Weekend</a>, ended with one of the best entrepreneurial experiences/exercises I&rsquo;ve had in my life. What was most different about this one than all the others was the level of camaraderie and synergy that we had amongst our team. It&rsquo;s great to work with people that work as hard as you do and care just as much about the success of a project/company/idea. In this post I hope to take you through the roller coaster that was the last 7 days and some of my lessons learned.</p>

<h2>MEGA Startup Weekend:</h2>


<p>SW is a 54-hour event where developers, artists, entrepreneurs and marketers combine their talents to pitch ideas for startup companies, form teams around those ideas, build prototypes/demos, and finally pitch it as a business on Sunday evening. Our event was called MEGA Startup Weekend because of the 120 cities they host the event in, this one was the biggest. Over 300 people signed up for 3 different verticals: Gaming, Mobile, and Robotics. Even despite how cool it sounds I can honestly say I had no idea what to expect going in. And I would not have signed up if my friends hadn&rsquo;t pushed me. I&rsquo;m going to go into a lot of detail about each step of the whole process so if it gets a little dry, feel free to skip to the next section.</p>

<p>The first day of the event was Friday which is where we all divided up into our verticals and got the opportunity to pitch an idea to try and build a team. In the gaming vertical there were probably over 30 game ideas pitched ranging from a Code Battle (learn to code by battling against your friends), Bet on anything with friends, Pirate Booty (pirate game with a mario type view), Productivity games, Zombie game (a  play on zombie games where instead you are the zombies attacking the people) and an Eskimo game (kinda like angry birds but multiplayer and you launch eskimos instead of birds). Nathan, my roommate, pitched an idea for apples-to-apples on the phone which didn&rsquo;t get any fan fare. And my idea for a game similar to Joust which featured music instead of visuals also got voted out. When it came time for everyone to form teams around the winning ideas, there were many which I was interested in trying, but none really jumped out as being amazing. Charles, a guy whose idea also got voted out, approached Nathan about developing the apples-to-apples idea. I soon joined and we began to work through the idea. We soon realized we needed more development help so we began looking for any developers that hadn&rsquo;t yet been taken. Fortunately we were able to poach our fourth and final teammate, Nikola, from another team. The founding team was now born!</p>

<p>We quickly got to work figuring out what we wanted to get done in next 48 hours. After all, we had to create a business/vision, build an app, and pitch it by Sunday evening. We began looking at each our skill sets and strengths to divide up tasks. Charles had a computer science degree from Berkeley and tons of coding experience so he was our lead developer / product manager. Nikola had a computer engineer with back-end experience so he was to build the architecture and back-end of the game. Nathan had experience in IT consulting and a background in finance so he was the project manager. I had experience building my own web design/marketing company so I took a business and UI/UX/design role. After we decided on roles it was now time to actually get started!</p>

<p>On Saturday we showed up nice and early to get started. Charles even brought an extra monitor to help boost productivity. To do mockups/wireframes of our app I used balsamiq which was an easy way to create designs/frame for the developers and designers to use in collaboration. Charles began pounding away at coding the android app and Nikola started on the back-end. Nathan began to plan our the pitch and started collaborating with mentors. We kept pounding away every hour and to my amazement, we made significant progress.</p>

<p>It wasn&rsquo;t until Saturday afternoon that I realized what we had was pretty special. Not only did we have a pretty cool idea, but our team had more synergy than any I had worked on before. We all knew our roles and we since we were all working so hard at them, it seemed like things were getting done very quickly. I finished the wireframes and design elements (buttons, backgrounds) and built our website by the end of the afternoon. Charles had most of the front-end functionality done by the evening. And we had received amazing advice from probably a dozen or so mentors that came by our table. Almost all the mentors had direct experience in building games, investing in games, or some other computer/gaming field. Those small tidbits of advice we got early on Saturday were no doubt essential parts of our eventual success. One of the mentors Adeo Ressi, advised us on some monetization strategies based on consumables/power-ups and also on making sure that we all dressed up as a team. Tony Parisi, Scott Foe, and Aaron Cammarata helped to work through our business model, go-to-market strategy, and presentation form.</p>

<p>Despite all of our hard work we were still no where near finished by the time they kicked us our of the Microsoft Campus at midnight. We decided to keep coding away at Charles&rsquo;s place and it wasn&rsquo;t till 5am that we were finally able to get the app working and get some much needed sleep.</p>

<p>By Sunday we came onto the Campus looking more like zombies than people. Nathan&rsquo;s contacts were glued to his eyes and I was growing a beard. But alas, this was the final stretch. As the day went on our team began to realize that while our game was awesome, it was still not quite awesome enough to win. It needed a bigger vision/idea. It needed a business and a company behind it. It wasn&rsquo;t till we started preparing to do our pitch that Charles came up with the game changer. The platform on top of the game. A vision for a new way of photo sharing. Completely unexplored.</p>

<p>Then came time to actually pitch. There were about 15 teams in our category and 5 judges with experience building gaming companies and investing in them. Nathan and Charles led the pitch and I led the demo of the app. Overall it went off very well and the judges couldn&rsquo;t poke any large holes into our plan, given that we&rsquo;d only had 48 hours to work it. When it came time to announce the winners our team had a very strong feeling that we had a chance to win. So I got our lucky hats that we had presented with ready. With our category they announced that it was a toss up between two teams so the brief excitement with our team being announced was quickly thrown off because we weren&rsquo;t sure if we had one. Luckily, they called out our name &ldquo;Stinky da Vinci&rdquo; and the rest is history! Thank you to all the folks that put on Startup Weekend!</p>

<p>[AFG_gallery id=&lsquo;1&rsquo;]</p>

<h2>Why our team did so well:</h2>


<p>As cliche as it sounds, synergy. I grew a much better understanding of the word after this weekend. First, our team had a very solid vision of what we wanted to build and the components that would make it compelling. This can&rsquo;t be fabricated. If our idea had been less novel / interesting / value-adding, the vision would&rsquo;ve been aimed much lower and therefore less powerful. Second, we all knew what roles we needed to play and since we were such a small team, there weren&rsquo;t any politics. I&rsquo;m now convinced that team/office politics are one of the worst poisons out there. Hard to fix and lethal to a productive/positive culture. Third, openness. All of us knew that we all wanted to build the best product possible and a company that could actually succeed whether or not we won the competition. Because of this, we weren&rsquo;t afraid to lower our pride if a better idea or suggestion came about. Fourth, hard work. We all slaved away on the project and burned through the midnight oil as a team. Even if you don&rsquo;t totally like someone you&rsquo;re working with, it&rsquo;s much easier to respect them if you know that they work their ass off and create good work. All of us created good work and added to what ultimately became the game and company.</p>

<h2>DEMO:</h2>


<p>After 54 hours of sleep deprivation we found out we would not be getting much sleep for another 72-96 hours because we had to pitch at the DEMO conference. I had initially expected to be done with Startup Weekend on Sunday and fly back to Seattle Monday at 7am but now I had to once again cancel the flight! Though this one wasn&rsquo;t too hard of a decision to make. If you&rsquo;re wondering what DEMO is, it&rsquo;s a very well known launchpad for emerging technologies. Some of the famous successes include E-Trade, Salesforce.com, TiVo, VMware and WebEx. Companies that get selected to pitch have 6 minutes to show off their latest/greatest technology in front of an audience of angel/venture capital investors and press from around the globe. Though we weren&rsquo;t looking for funding it was still an amazing opportunity to network with investors/press and just to be in the middle of so many innovations!</p>

<p>One of the standout technologies was a company called <a href="http://tourwrist.com/">TourWrist</a> which is basically an iPad app that gives you a 360 view of picture. Almost as if you&rsquo;re reliving that moment in time. It&rsquo;s amazing stitching technology and solid UI made it really stand out. I believe it&rsquo;s free so I would urge anyone with an iPad or iPhone to check it out. You won&rsquo;t be disappointed. Over the last two days I must have watched pitches from over 60 companies with a wide range of coolness and potential. Here are a some of my thoughts:</p>

<ul>
    <li>Great presentation skills can make all the difference. Toopher was a company which allowed for secure authentication to your mobile phone. Doesn't sound like the most interesting topic right? However the Founder/Speaker did a great job of adding in tons of humor, self-deprecation and ended by grinding up competitors products in a blender (literally). Needless to say he fully engaged the audience and made them <em>feel</em> his message.</li>
    <li>While there were tons of breakout technologies, there were also tons of companies that seemed to solve a problem that didn't exist. Or identified a problem that existed and built an irrelevant tool. One such example was a website which helped job seekers find jobs based on semantically understanding their resume and matching their Myers-Briggs with that of the job. First of all, job hunting is a pain in the ass and sucks not because companies don't get enough resumes, but because companies don't have the people that they want to hire in their immediate network. Most companies would always prefer to hire someone based on a recommendation from an employee or friend. It's validation. And it stands on the integrity of the person making the recommendation. Second, the Myers-Briggs while in principle might be nice, is a pretty crude way to match people up for a job.</li>
    <li>Many companies, especially in the consumer space identified a problem and made a decent solution, but didn't focus on the true business problem with consumer focused technology which distribution and adoption. One such example made a new DVR blending high quality, high storage capacity and a kitchen sink. To me, this is the typical "new" technology which has a bunch of new features, faster, cooler/sleeker, etc. But especially in this industry, the question is how are you going to distribute? Does the consumer actually want cooler, faster, more storage? Tons of companies flood into the TV/DVR space and few have had any success because they can't get the consumer to actually adopt it. Google TV is going to make a run at the TV space as well.</li>
    <li>In this era, beautiful design/UI is essential. In fact, if your product is designed well enough, with solid aesthetics, and a simple UI, the product can do all the marketing for you. While Instagram isn't exactly a business model, this was at the core of their success. Many companies had beautiful UI's such as TourWrist, NotesCloud, DealAngel and Edamam.</li>
</ul>


<p>These were some of the key areas that I thought separated the companies that had potential from the rest of the herd. And this is only a critique on their 6 minute presentation, I&rsquo;m sure all of the companies could go more in depth on how they plan to approach their weaknesses. Here is a brief list of my favorites:</p>

<ol>
    <li><a href="http://tourwrist.com/">TourWrist</a> - 360 imaging for iPad and iPhone. It's really slick.</li>
    <li><a href="http://www.zboardshop.com">ZBoard</a> - World's first, weight-sensing electric skateboard. Basically Segway meets skateboard, it's pretty sweet.</li>
    <li><a href="https://www.toopher.com/">Toopher</a> - Location based authentication to mobile phone</li>
    <li><a href="http://www.dozuki.com">Dozuki</a> - Easily create and share instructions / documentation</li>
    <li><a href="http://www.fusionio.com">Fusion-io</a> - Extremely efficient and cost effective new hardware innovations</li>
</ol>


<p>The other half of DEMO was about the networking! After the sessions investors and press were able to network with all the companies. Our booth was setup on the wall by the entrance and we had the pleasure to meet investors, press, and tons of entrepreneurs from around the globe. DEMO did a great job producing the whole event with nothing really going wrong. And plenty of open bars =)</p>

<p>Thank you to the Startup Weekend team, Ahmed, Aaron, Marc, Franck, Claire and anyone else who I missed. Also, thanks to the DEMO team for putting on a great show!</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons from a young entrepreneur (Part 2 of 3)]]></title>
    <link href="http://guymorita.github.io//github/2012/03/lessons-from-a-young-entrepreneur-part-2-of-3/"/>
    <updated>2012-03-31T00:00:00-07:00</updated>
    <id>http://guymorita.github.io//github/2012/03/lessons-from-a-young-entrepreneur-part-2-of-3</id>
    <content type="html"><![CDATA[<div>

Continuation from <a href="http://www.lionhacks.com/2012/03/lessons-from-a-young-entrepreneur/">Part 1</a>
<h2>Management is an entirely different world than being a technician</h2>
</div>


<p>As I read in one of my favorite books, “The E-Myth Revisited” by Michael Gerber, we all have three personalities within ourselves – a technician, a manager, and an entrepreneur. The technician knows how to do the technical work of the business like baking pies, building websites, or tuning an engine. The manager knows how to monitor and organize the team/projects. The entrepreneur creates a vision and builds the business.</p>

<p>While the technical work is relatively straight forward, the managerial work is much more subjective and soft. Getting an employee to like you is relatively easy but getting an employee to consistently, happily carryout a project and never-endingly work towards the company’s benefit is an entirely different world. There is an infinite number of factors that go into being a good manager and no one is perfect. If I could list a few important factors it would be high integrity, timeliness, great communication, optimism, ability to make decisions despite ambiguity and a good listener. In my brief experience, I found that it was far more important for the team to respect me, than to like me. As long as I clearly communicated to them that my actions were in the best interest of the company and therefore in their job security. I’m pretty sure mastering the art and science of management will be a lifelong endeavor.</p>

<div>
<h2>Invest back into the company</h2>
</div>


<p>2010 was a relatively good year for the company financially. In fact the margins were so high that I thought the company was extremely successful. Higher margins are good right? Yes, however what I didn’t realize was that by keeping the margins high, I was taking away from how much better the service could have become. It was an opportunity cost to creating higher customer lifetime value.</p>

<p>With our margins at 30%+ we were creating cash flow; however we could have greatly increased the level of customer satisfaction if we had reinvested another 15%. Had I realized this before, I would’ve kept the margins at a safe enough level to survive and reinvested the rest back into the company instead of letting it sit in the company bank account. That said, when you&rsquo;re bootstrapping a company it will feel like you need to cling to every penny.</p>

<div>
<h2>Integrity is everything</h2>
</div>


<p>For the early part of my life this word has had a purely theoretical meaning. After receiving my black belt in Tae Kwon Do I remember it as one of the Five Tenets (codes of conduct), but even then it was just another check on the list.</p>

<p>Integrity is everything. Both in terms of self-trust and in terms of choosing team members who also operate with high integrity. Integrity on a personal level is being able to trust that you will carry out the things you say in your head. On the smallest level, it&rsquo;s going to bed on-time and getting up on time. If you can&rsquo;t actually carry out what you say you want to do, it will continually lower your self-trust. Can you will yourself to go to the gym 3 days a week? Can you quit smoking? Can you eat healthier? Can you trust yourself to do the things you say you will do? It&rsquo;s a very important question. It might also help to look at it from the perspective of the three brains, as I mentioned in <a href="http://www.lionhacks.com/2012/03/lessons-from-a-young-entrepreneur/">Part 1 about psychology</a>. Remember that if we were completely rational beings, we would go to bed at the ideal time, wake up at the ideal time, eat perfectly, go to the gym 3-4 days a week, work hard at work, cut everything off after work and be super happy all the time. Unfortunately, we aren&rsquo;t completely rational. We have 3 brains to deal with, not just one. And learning how and when your reptilian/emotional brains are working against you is important. The logical brain knows you should eat broccoli instead of potato chips because you will have better energy and it&rsquo;s extremely good for you, it&rsquo;s the reptilian/emotional brains that want the high that comes from the texture and taste of the chip. This relates to integrity just because you have to recognize when the reptilian/emotional brains are taking over and you&rsquo;re not being logical or operating with integrity.</p>

<p>Integrity is the core of business. Choose team members that have lots of integrity. This may seem soft or not applicable until you look at the opposite. Imagine a team where you couldn&rsquo;t trust anyone to do what they said, get it done on time or to the standards you wanted. How would your output be? Pretty terrible right? The ability to trust that you can carry out your own desires and the ability to trust the words of another is priceless. If you can’t fully trust your team to carry out what they promise on-time; missed deadlines, finger-pointing and a lot of uncomfortable conversations are sure to follow. This carries the exact same effect with dealings with clients.</p>

<div>
<h2>Get comfortable being uncomfortable</h2>
</div>


<p>As an entrepreneur I quickly found myself in tons of uncomfortable positions. Some examples might be the uncertainty of a new project/marketing campaign, an uncomfortable conversation with a team member, or new long-term lease to be signed. Calculate the risk of the project/campaign, have the uncomfortable conversation sooner than later, and talk to mentors/lawyers about the lease. Find as much information as you can about the situation, manage/mitigate the risks, and finally make a decision acknowledging that while you did as much research as you could, you have incomplete data. On a daily basis I had to make decisions based on 60% certainty. There is rarely a perfect answer. Nothing is certain, especially in business. Just like setting out to create a business, the most important part is the decision and action to start. Situations won’t solve themselves with time, especially if you’re CEO.</p>

<p>One of the biggest pieces of ambiguity I had to overcome was whether the company would succeed or fail. Rather than trying to convince myself it would succeed, I completely accepted that it was uncertain, dedicated myself to doing everything possible to help is succeed and accepted the results. Being afraid of failure and being attached to success brings nothing but unnecessary stress.</p>

<p>Many people that talk about starting companies but don&rsquo;t end up following through don&rsquo;t truly understand that often times in entrepreneurship starting is more important than planning. Take action now. If you have an idea, create an name for it Monday. Buy a domain on Tuesday. Research all the companies in the industry Wednesday through Friday. Take action now. Today. Not plan. If you think more planning is going to make the future more certain, it&rsquo;s just an illusion. Planning in entrepreneurship is often only useful as an exercise. The business model will likely change many many times over the development of the company. Build a solid team and vision, and like Columbus, set sail west.</p>

<div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lessons from a young entrepreneur (Part 1 of 3)]]></title>
    <link href="http://guymorita.github.io//github/2012/03/lessons-from-a-young-entrepreneur/"/>
    <updated>2012-03-15T00:00:00-07:00</updated>
    <id>http://guymorita.github.io//github/2012/03/lessons-from-a-young-entrepreneur</id>
    <content type="html"><![CDATA[<p>The last 2 years of my professional life were almost completely devoted to building a company. The experience has been nothing short of surreal with swings up and down that resemble a roller coaster ride. The business which I started with less than $1,000 and no funding, grew to over $700,000 in revenue and created over 16 full-time jobs worldwide in 4 countries. Not the fastest growth that’s ever been seen, but certainly not the slowest.</p>

<p>Instead of thinking of the situation as a success or failure, I’ve treated the experience as a series of lessons. These lessons I’d like to share so that hopefully others can learn or refine these ideas and get value from them. All are from my personal experience and should be taken with a grain of salt.</p>

<p>Most of these lessons will have a business focus, but many of these principles are equally important in building strong relationships as they are in business. One small note is that many of these will sound very simple and they are. It’s not the knowing of them that I found important, it’s the internalization of the idea into something that you carryout unconsciously. And in my case, that only happened after I experienced it firsthand. I’ve cut it down to the twelve ideas I found most important but I could go on with dozens more:</p>

<div>
<h2>Create massive value</h2>
</div>


<p>This is the core idea that I’m still working on internalizing. The sole purpose of a business is to create value for its customers. The extent to which the company doesn’t create value is the extent to which the company shouldn’t even exist.</p>

<p>As a business owner, I was bombarded with sales/marketing problems, employee issues, office logistics, workflow problems, IT problems and everything else under the sun. On many occasions I lost sight of the fact that the only reason the company existed was to create an amazing customer experience. I valued the details of the contracts signed, the budget we were aiming to achieve, or even employee happiness over our own customer’s satisfaction. Delivering a great customer experience should be the staple behind every business decision and certainly behind the mission/vision. If you have a process that creates happy customers and a business model which makes money, so much the better. If you don&rsquo;t create happy customers and you make money, there are bound to be problems.</p>

<p>Another lesson from this is that if it comes between your customer’s happiness and your employee’s happiness, the former is more important. Ideally you can have both, but often times a decision has to be made which favors one over the other.</p>

<div>
<h2>Trust, but verify</h2>
</div>


<p>These are words from President Ronald Reagan. This lesson has been beat into my head more times than I can count. I experienced this with the sales director whom I had brought on to lead our sales team. When I initially brought him on, I was extremely happy with his performance. He created structure and processes that effectively drove the sales team. I trusted him to take the company’s best interest. I trusted too much and didn’t verify. Months into his employment cracks started to show. I saw contracts which were put together improperly; overpromising that had taken place and lastly, his attendance became sporadic as a result of his personal problem with crack cocaine.</p>

<p>Every entrepreneur should fully believe in his/her team’s abilities to carry out the vision; however, checks/balances need to be put in place to verify whether that trust is warranted. Empathize with what your team says, but see how their intentions match up to their actions.</p>

<div>
<h2>Psychology is important</h2>
</div>


<p>One of the most interesting things I’ve learned this year is about the brain. According to Truine Brain Theory, we actually have three brains, not just one. Each of which was developed on top of an older one. Our first is the reptilian brain responsible for basic life functions like voluntary motor function, eye movement, and other essential survival instincts. Next is the limbic brain (aka the emotional brain) responsible for motivation and emotion. And lastly, the neocortex (aka the logical/rational brain) which gives us the ability to confer language, create abstract thoughts, plan and perceive.</p>

<p>This is interesting for two reasons. First, the older brains always take priority over the newer ones. This means that your survival instincts found in your spinal column and reptilian brain, overpower the demands of your logic and emotion. So this is why if you see a car that’s about to hit you, your body automatically goes into survival mode, your senses heighten, and you unconsciously scramble for safety. Second and more interestingly is the fact that the emotional brain takes precedence over the logical brain. This is why we give into our compulsive shopping habits, burst out at a loved one and say things we don’t mean, or perform poorly when we knew exactly how to execute. For our logical mind to operate at peak performance, our emotional mind has to be positive and in a good state. If our emotions are out of whack, stressed, or negative, it literally makes us unable to think logically because our emotional brain takes precedence over our logical brain. Another way to put it is that “stress makes you stupid”.</p>

<p>When working as a CEO or as any role with a lot of accountability, remember that managing stress is just as important as anything else. For if your emotional brain becomes flooded with stress/negativity/anger, your rational brain freezes up and can’t make logical decisions.</p>

<p>This also has a lot of ties to work-life balance. Even though I was putting in 80+ hour weeks and sleeping in the office on occasion, I still forced myself to let go on Saturday and enjoy my personal life. I surely could not have made it as far as I did if I ignored my personal needs to relax and enjoy hanging out with my friends.</p>

<p>Though life can get extremely stressful at times, I think it&rsquo;s important to remember that almost all our stress is put in place from our modern social structure. If we take a brief look at Maslow&rsquo;s hierarchy, most people in the first world don&rsquo;t even have to worry about the bottom three layers. We don&rsquo;t have much to truly worry and stress about.</p>

<div>
<h2>Look out for yourself</h2>
</div>


<p>No one in the company is ever going to have the same perspective as the owner(s). Empathize with your team and understand their concerns; but realize that their motivations are likely much different than yours. Employees will never feel the full effect of all the liabilities, responsibilities, and accountabilities that the owners face. Realizing this helped me make many of the tough decisions when the team was in disagreement.</p>

<p>Solid leadership, equity incentives, aligned values and a clear vision can help to lessen the difference; however a small amount is likely to always be there.</p>
]]></content>
  </entry>
  
</feed>
